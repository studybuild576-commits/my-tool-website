import React from 'react';
// FIX 1: рдЕрдм рд╣рдо рдорд╛рдирддреЗ рд╣реИрдВ рдХрд┐ рдпреЗ imports resolve рд╣реЛ рдЬрд╛рдПрдВрдЧреЗ рдХреНрдпреЛрдВрдХрд┐ рдЖрдкрдХреА ToolCard рдареАрдХ рд╣реИ
import { tools } from "@/lib/tools"; 
import ToolCard from "@/components/ToolCard"; 

// FIX 2: LucideIcon type рдФрд░ рд╕рднреА icons рдХреЛ import рдХрд░реЗрдВ
import * as LucideIcons from "lucide-react";
import { type LucideIcon, FileText } from "lucide-react";


export default function ToolsPage() {
┬а return (
┬а ┬а <main className="min-h-screen bg-gray-50 py-10">
┬а ┬а ┬а {/* Header Section */}
┬а ┬а ┬а <section className="bg-white rounded-lg shadow-sm p-8 mb-10 max-w-6xl mx-auto">
┬а ┬а ┬а ┬а <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-6">
┬а ┬а ┬а ┬а ┬а <div>
┬а ┬а ┬а ┬а ┬а ┬а <h1 className="text-4xl font-extrabold text-gray-900 mb-2 flex items-center gap-2">
┬а ┬а ┬а ┬а ┬а ┬а ┬а ЁЯз░ All Tools
┬а ┬а ┬а ┬а ┬а ┬а </h1>
┬а ┬а ┬а ┬а ┬а ┬а <p className="text-slate-600 max-w-2xl">
┬а ┬а ┬а ┬а ┬а ┬а ┬а Fast, private online utilities for PDFs and text тАФ convert, merge,
┬а ┬а ┬а ┬а ┬а ┬а ┬а split, compress and more. No sign-up required.
┬а ┬а ┬а ┬а ┬а ┬а </p>
┬а ┬а ┬а ┬а ┬а </div>

┬а ┬а ┬а ┬а ┬а <div className="w-full md:w-72">
┬а ┬а ┬а ┬а ┬а ┬а <input
┬а ┬а ┬а ┬а ┬а ┬а ┬а type="search"
┬а ┬а ┬а ┬а ┬а ┬а ┬а placeholder="Search tools..."
┬а ┬а ┬а ┬а ┬а ┬а ┬а className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
┬а ┬а ┬а ┬а ┬а ┬а />
┬а ┬а ┬а ┬а ┬а </div>
┬а ┬а ┬а ┬а </div>
┬а ┬а ┬а </section>

┬а ┬а ┬а {/* Tools Grid */}
┬а ┬а ┬а <section className="max-w-6xl mx-auto px-4">
┬а ┬а ┬а ┬а <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
┬а ┬а ┬а ┬а ┬а {tools.map((tool) => {
┬а ┬а ┬а ┬а ┬а ┬а // тЬЕ If icon is string (like "FileIcon"), convert it to actual component
┬а ┬а ┬а ┬а ┬а ┬а const ResolvedIcon =
┬а ┬а ┬а ┬а ┬а ┬а ┬а typeof tool.icon === "string"
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а ? LucideIcons[tool.icon as keyof typeof LucideIcons]
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а : tool.icon;
            
            // Safety check рдФрд░ Type Assertion
            // рдпрд╣ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░рддрд╛ рд╣реИ рдХрд┐ рдпрд╣ рдПрдХ React Component рд╣реИ, string рдирд╣реАрдВ, 
            // рдФрд░ рдпрджрд┐ рдпрд╣ undefined рд╣реИ рддреЛ FileText рдкрд░ рд╡рд╛рдкрд╕ рдЖ рдЬрд╛рддрд╛ рд╣реИред
            const FinalIcon = (!ResolvedIcon || typeof ResolvedIcon === 'string') 
                ? FileText 
                : ResolvedIcon;

┬а ┬а ┬а ┬а ┬а ┬а return (
┬а ┬а ┬а ┬а ┬а ┬а ┬а <ToolCard
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а key={tool.route}
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а name={tool.name}
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а route={tool.route}
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а // FIX 3: LucideIcon type рдкрд░ рд╕реНрдкрд╖реНрдЯ рд░реВрдк рд╕реЗ Typecast рдХрд░реЗрдВред
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а icon={FinalIcon as LucideIcon}
┬а ┬а ┬а ┬а ┬а ┬а ┬а ┬а description={tool.description}
┬а ┬а ┬а ┬а ┬а ┬а ┬а />
┬а ┬а ┬а ┬а ┬а ┬а );
┬а ┬а ┬а ┬а ┬а })}
┬а ┬а ┬а ┬а </div>
┬а ┬а ┬а </section>
┬а ┬а </main>
┬а );
}
